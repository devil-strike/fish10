;**************
;* FiSH 10 mIRC Script - Hugely based on FiSH v1.30 *
;* Heavily modified for use in AdiIRC *
;**************
; "FiSH 10" by the way means "FiSH 2" in binary, and the year is 2010, therefore "FiSH 10".

on *:START: {
  ; ********** you can change the blow.ini path here if you like: **********
  ; for example to use %appdata%\mIRC:
  set %blow_ini $shortfn($adiircdir $+ blow.ini)

  ; Path to the fish_10.dll
  set %FiSH_dll $qt($nofile($scriptdir) $+ fish_10.dll))

  ; this one is just for info:
  .dll %FiSH_dll _callMe

  ; and this one is important again:
  .dll %FiSH_dll FiSH_SetIniPath %blow_ini
}

; *** auto-keyXchange ***
on *:OPEN:?:{
  if ($dll(%FiSH_dll,INI_GetBool,auto_keyx 1) == 1) {
    var %tmp1 = $dll(%FiSH_dll,FiSH_GetKey10, $network $nick)
    if ($len(%tmp1) > 0) {
      FiSH.DH1080_INIT $nick
    }
    unset %tmp1
  }
}

on $*:PARSELINE:in:/^.*?\s*\x3A(([^!@\s]+)!([^@\s]+)@(\S+)) (PRIVMSG|NOTICE|TOPIC) (\S+) \x3A([\x01]*(ACTION)*.+[\x01]*)$/i:{
  var %nick    = $regml(2)
  var %target  = $regml(6)
  var %msg     = $regml(7)
  var %msgtype = $regml(5)
  var %action  = $regml(8)

  ;Ignore KeyExchange DH1080
  if (%msgtype == NOTICE && $left(%msg,6) == DH1080) { return }
  ;no decryption cases
  if ($dll(%FiSH_dll,INI_GetBool,process_incoming 1) == 0) { return }
  if (%msgtype == TOPIC && $dll(%FiSH_dll, INI_GetSectionBool,$network %target encrypt_topic 0) == 0) { return }
  if (%msgtype == NOTICE && $readini(%blow_ini,FiSH,encrypt_notice) == 0) { return }
  if (%msgtype == PRIVMSG && %action == ACTION && $readini(%blow_ini,FiSH,encrypt_action) == 0) { return }

  if (%msgtype == PRIVMSG && %action != ACTION) {
    var %style = $readini(%blow_ini,FiSH,mark_position)
    var %mark = $dll(%FiSH_dll, INI_GetSectionBool,$network %target mark_encrypted 0)
  }

  ;decryption
  if ($left(%msg, 3) == +OK || $left(%msg, 4) == mcps || (%action == ACTION && ($mid(%msg,9,3) == +OK || $mid(%msg,9,4) == mcps))) {
    ;chop of 'OK+ ' or 'mcps '
    var %encrypted = %msg
    if ($left(%encrypted, 3) == +OK) { %encrypted = $right(%encrypted,-4) }
    elseif ($left(%encrypted, 4) == mcps) { %encrypted = $right(%encrypted,-5) }
    elseif (%action == ACTION && $mid(%encrypted,9,3) == +OK) { %encrypted = $mid(%encrypted,13,$calc($len(%encrypted) - 13)) }
    elseif (%action == ACTION && $mid(%encrypted,9,4)) == mcps) { %encrypted = $mid(%encrypted,14,$calc($len(%encrypted) - 14)) }

    ;find real target --> if $me get the senders key
    if (%target == $me) {
      %target = %nick
    }

    var %key = $dll(%FiSH_dll,FiSH_GetKey10, $network %target)

    if ($len(%key) > 1) {
      if ($left(%encrypted, 1) == * && $left(%key, 4) != cbc:) {
        %key = $+(cbc:,%key)
      }
      if ($left(%encrypted, 1) != * && $left(%key, 4) == cbc:) {
        %key = $right(%key,-4)
      }
      %encrypted = $iif($left(%encrypted, 1) == *, $right(%encrypted, -1), %encrypted)
      var %decrypted = $dll(%FiSH_dll, FiSH_decrypt_msg, %key %encrypted)

      if (%style > 0 && %mark == 1) {
        %decrypted = $iif(%style == 1,$+(%decrypted,$readini(%blow_ini,FiSH,mark_encrypted)),$+($readini(%blow_ini,FiSH,mark_encrypted),%decrypted))
      }

      .parseline -it $replace($parseline,%msg,%decrypted)
    }
    else if (%style > 0 && %mark == 1) {
      .parseline -it $replace($parseline,$readini(%blow_ini,FiSH,mark_encrypted),)
    }
  }
  else if (%style > 0 && %mark == 1) {
    .parseline -it $replace($parseline,$readini(%blow_ini,FiSH,mark_encrypted),)
  }
}

on *:INPUT:*:{
  if (($left($1,1) == / && !$ctrlenter) || (!$1)) return
  var %key = $dll(%FiSH_dll,FiSH_GetKey10,$network $target)
  if ($len(%key) < 1) { return }
  else {
    var %prefix = $readini(%blow_ini,FiSH,plain_prefix)
    if (%prefix == $null) { %prefix = +p }
    var %pfxlen = $len(%prefix)    
    if (%prefix == $left($1,%pfxlen)) { 
      echo $color(own) -trmbfw0 $replace($prefixuser($iif($chan, $chan, $nick), $nick),$chr(32),$chr(160)) $right($1-, $calc(0 - %pfxlen))
    }
    else {
      var %style = $readini(%blow_ini,FiSH,mark_position)
      var %mark = $dll(%FiSH_dll, INI_GetSectionBool,$network $target mark_encrypted 0)

      var %msg = $parms
      if (%style > 0 && %mark == 1) {
        %msg = $iif(%style == 1,$+($parms,$readini(%blow_ini,FiSH,mark_encrypted)),$+($readini(%blow_ini,FiSH,mark_encrypted),$parms))
      }
      echox $color(own) -trmbfw0 $replace($prefixuser($iif($chan, $chan, $nick), $nick),$chr(32),$chr(160)) %msg
    }
    privmsg $target : $+ $parms
    halt
  }
}

on $*:PARSELINE:out:/^(PRIVMSG|NOTICE|TOPIC) (\S+) \x3A([\x01]*(ACTION)*.+[\x01]*)$/i:{
  var %msgtype = $regml(1)
  var %target  = $regml(2)
  var %msg     = $regml(3)
  var %action  = $regml(4)
  ;Ignore KeyExchange DH1080
  if (%msgtype == NOTICE && $left(%msg,6) == DH1080) { return }
  ;no decryption cases
  if ($dll(%FiSH_dll,INI_GetBool,process_outgoing 1) == 0) { return }
  if (%msgtype == TOPIC && $dll(%FiSH_dll, INI_GetSectionBool,$network %target encrypt_topic 0) == 0) { return }
  if (%msgtype == NOTICE && $readini(%blow_ini,FiSH,encrypt_notice) == 0) { return }
  if (%msgtype == PRIVMSG && %action == ACTION && $readini(%blow_ini,FiSH,encrypt_action) == 0) { return }

  var %key = $dll(%FiSH_dll,FiSH_GetKey10,$network %target)
  if ($len(%key) < 1) { return }

  var %prefix = $readini(%blow_ini,FiSH,plain_prefix)
  if (%prefix == $null) { %prefix = +p }
  var %pfxlen = $len(%prefix)    

  if (%prefix == $left(%msg,%pfxlen)) { 
    .parseline -ot $replace($parseline,%msg,$right(%msg, $calc(0 - %pfxlen))) 
    return
  }
  ;encrypt
  if ($left(%key,4) != cbc: && $dll(%FiSH_dll, INI_GetSectionBool,$network %target cbc 0) == 1) {
    %key = $+(cbc:,%key)
  }
  var %encrypted = $+(+OK,$chr(32),$dll(%FiSH_dll, FiSH_encrypt_msg, %key %msg))
  .parseline -ot $replace($parseline,%msg,%encrypted)
}

on *:NICK:{
  if (($nick == $me) || ($upper($newnick) == $upper($nick))) { return }
  if (($query($newnick) == $null) || (%NickTrack != [On])) { return }
  var %ky_tmp = $dll(%FiSH_dll,FiSH_GetKey10,$network $nick)
  if ($len(%ky_tmp) > 4) {
    writeini -n %blow_ini $+($network,:,$newnick) key %ky_tmp
    writeini -n %blow_ini $+($network,:,$newnick) date $readini(%blow_ini,$+($network,:,$nick),date)
    writeini -n %blow_ini $+($network,:,$newnick) cbc $readini(%blow_ini,$+($network,:,$nick),cbc)
    writeini -n %blow_ini $+($network,:,$newnick) dh1080_cbc $readini(%blow_ini,$+($network,:,$nick),cbc)
    if ($dll(%FiSH_dll,INI_GetBool,no_legacy 1) == 0) {
      writeini -n %blow_ini $newnick key %ky_tmp
      writeini -n %blow_ini $newnick date $readini(%blow_ini,$+($network,:,$nick),date)
      writeini -n %blow_ini $newnick cbc $readini(%blow_ini,$+($network,:,$nick),cbc)
      writeini -n %blow_ini $newnick dh1080_cbc $readini(%blow_ini,$+($network,:,$nick),cbc)
    }
  }
  unset %ky_tmp
}

on ^*:NOTICE:DH1080_INIT*:?:{
  if ($len($2) > 178 && $len($2) < 182) {
    query $nick
    echo $color(Mode text) -tm $nick *** FiSH: Received DH1080 public key from $nick $+ , sending mine...
    var %tempkey $dll(%FiSH_dll,DH1080_gen,NOT_USED)
    %FiSH.prv_key = $gettok(%tempkey, 1, 32)
    %FiSH.pub_key = $gettok(%tempkey, 2, 32)
    unset %tempkey
    var %secret = $dll(%FiSH_dll,DH1080_comp, %FiSH.prv_key $2)
    if ($3 == CBC || _CBC isin $1) {
      .notice $nick DH1080_FINISH %FiSH.pub_key CBC
      FiSH.setkey $nick cbc: $+ %secret
    }
    else {
      .notice $nick DH1080_FINISH %FiSH.pub_key
      FiSH.setkey $nick %secret
    }
    unset %FiSH.prv_key
    unset %FiSH.pub_key
    unset %secret
  }
  halt
}

on ^*:NOTICE:DH1080_FINISH*:?:{
  if ( $eval( $+(%,FiSh.dh, $nick), 2) != 1 ) {
    echo "No keyXchange in progress!"
    halt
  }
  if ($len($2) > 178 && $len($2) < 182) {
    if ($len(%FiSH.prv_key) == 180 || $len(%FiSH.prv_key) == 181) {
      var %secret = $dll(%FiSH_dll,DH1080_comp, %FiSH.prv_key $2)
      if ($3 == CBC || _CBC isin $1) {
        FiSH.setkey $nick cbc: $+ %secret
      }
      else {
        FiSH.setkey $nick %secret
      }
      unset $+(%, FiSH.dh, $nick)
      unset %FiSH.prv_key
      unset %FiSH.pub_key
      unset %secret
    }
  }
  halt
}

alias -l FiSH.WriteKey {
  if ($2 == /query) var %cur_contact = $active
  else var %cur_contact = $2
  if ($3- == $null) return

  if ($dll(%FiSH_dll,FiSH_WriteKey10,$1 $network %cur_contact $3-) == ok) {
    var %info = *** FiSH: Key for %cur_contact set to *censored* $iif($gettok($3-,1,58) == cbc, (CBC Mode), )

    if ($window(%cur_contact) == $null) echo $color(Mode text) -at %info
    else echo $color(Mode text) -tm %cur_contact %info
  }
}

alias FiSH.setkey { FiSH.WriteKey decode_utf8 $1 $2- }
alias FiSH.setkey_utf8 { FiSH.WriteKey raw_bytes $1 $2- }

alias FiSH.usechankey {
  var %theKey = $readini(%blow_ini,$+($network,:,$2),key)
  if (%theKey == $null) {
    echo $color(Mode text) -at *** FiSH: No valid key for $2 found
  }
  else {
    writeini -n %blow_ini $+($network,:,$1) key %theKey
    writeini -n %blow_ini $+($network,:,$1) date $date
    writeini -n %blow_ini $+($network,:,$1) cbc $readini(%blow_ini,$+($network,:,$2),cbc)
    writeini -n %blow_ini $+($network,:,$1) dh1080_cbc $readini(%blow_ini,$+($network,:,$2),cbc)
    if ($dll(%FiSH_dll,INI_GetBool,no_legacy 1) == 0) {
      writeini -n %blow_ini $1 key %theKey
      writeini -n %blow_ini $1 date $date
      writeini -n %blow_ini $1 cbc $readini(%blow_ini,$2,cbc)
      writeini -n %blow_ini $1 dh1080_cbc $readini(%blow_ini,$+($network,:,$2),cbc)
    }
    unset %theKey
    echo $color(Mode text) -at *** FiSH: Using same key as $2 for $1
  }
}

alias FiSH.showkey {
  if ($1 == /query) var %cur_contact = $active
  else var %cur_contact = $1

  %theKey = $dll(%FiSH_dll,FiSH_GetKey10, $network %cur_contact)
  if (%theKey != $null) {
    window -dCo +l @Blowcrypt-Key -1 -1 500 80
    aline @Blowcrypt-Key Key for %cur_contact :
    aline -p @Blowcrypt-Key %theKey
    unset %theKey
  }
  else {
    echo $color(Mode text) -at *** FiSH: No valid key for %cur_contact found
  }
}

alias FiSH.removekey {
  if ($1 == /query) var %cur_contact = $active
  else var %cur_contact = $1
  $dll(%FiSH_dll,FiSH_DelKey10,$network %cur_contact)
  echo $color(Mode text) -at *** FiSH: Key for %cur_contact has been removed
}

alias keyx { FiSH.DH1080_INIT $1 }

alias FiSH.DH1080_INIT {
  if ( ($1 == /query) || ($1 == $null) ) var %cur_contact = $active
  else var %cur_contact = $1
  set $+(%, FiSH.dh, %cur_contact) 1
  var %tempkey $dll(%FiSH_dll,DH1080_gen,NOT_USED)
  %FiSH.prv_key = $gettok(%tempkey, 1, 32)
  %FiSH.pub_key = $gettok(%tempkey, 2, 32)
  unset %tempkey
  .NOTICE %cur_contact DH1080_INIT %FiSH.pub_key $iif($dll(%FiSH_dll,INI_GetSectionBool,$network %cur_contact dh1080_cbc 1) == 0,, CBC)
  echo $color(Mode text) -tm $nick *** FiSH: Sent my DH1080 public key to %cur_contact $+ , waiting for reply ...
}

; Decrypt initial topic if enabled
raw 332:*:{
  if ($dll(%FiSH_dll,INI_GetSectionBool,$network $2 encrypt_topic 0) != 1) {
    return
  }
  if ($left($3,3) != +OK) {
    return
  }
  var %key = $dll(%FiSH_dll,FiSH_GetKey10,$network $2)
  if ($len(%key) > 1) {
    if ($left($4, 1) == * && $left(%key, 4) != cbc:) {
      %key = $+(cbc:,%key)
    }
    if ($left($4, 1) != * && $left(%key, 4) == cbc:) {
      %key = $right(%key,-4)
    }
    var %msg = $iif($left($4,1) == *,$right($4-, $calc($len($4-) - 1)), $4-)
    .timer 1 0 fakeraw : $+ $server 332 $me $2 $unsafe(: $+ $dll(%FiSH_dll, FiSH_decrypt_msg,%key %msg))
    halt
  }
}

alias FiSH.prefix {
  if ($1 != $null) {
    writeini -n %blow_ini FiSH plain_prefix $1-
    echo $color(Mode text) -at *** FiSH: Plain-prefix set to $1-
  }
}

alias FiSH.cryptmark {
  writeini -n %blow_ini FiSH mark_encrypted $1-
  echo $color(Mode text) -at *** FiSH: cryptmark set to $+($chr(91),$1-,$chr(93))
}

menu channel {
  -
  FiSH
  .Show key :FiSH.showkey $chan
  .$iif($len($dll(%FiSH_dll,FiSH_GetKey10,$network $chan)) < 1, $style(2)) CBC key $iif($dll(%FiSH_dll, INI_GetSectionBool,$network $chan cbc 0) == 1, [True], [False])
  ..Enable CBC key:dll %FiSH_dll INI_SetSectionBool $network $chan cbc 1
  ..Disable CBC key:dll %FiSH_dll INI_SetSectionBool $network $chan cbc 0
  .-
  .Set new key :FiSH.setkey $chan $?
  .Set new key (UTF-8) :FiSH.setkey_utf8 $chan $?
  .Remove key :FiSH.removekey $chan
  .Copy key :clipboard $dll(%FiSH_dll,FiSH_GetKey10,$network $chan)
  .Misc config
  ..Encrypt outgoing $iif($dll(%FiSH_dll,INI_GetBool,process_outgoing 1) == 0, [Off], [On])
  ...Enable :dll %FiSH_dll INI_SetBool process_outgoing 1
  ...Disable :dll %FiSH_dll INI_SetBool process_outgoing 0
  ..Decrypt incoming $iif($dll(%FiSH_dll,INI_GetBool,process_incoming 1) == 0, [Off], [On])
  ...Enable :dll %FiSH_dll INI_SetBool process_incoming 1
  ...Disable :dll %FiSH_dll INI_SetBool process_incoming 0
  ..-
  ..Encrypt NOTICE $iif($dll(%FiSH_dll,INI_GetBool,encrypt_notice) == 1, [On], [Off])
  ...Enable :dll %FiSH_dll INI_SetBool encrypt_notice 1
  ...Disable :dll %FiSH_dll INI_SetBool encrypt_notice 0
  ..Encrypt ACTION $iif($dll(%FiSH_dll,INI_GetBool,encrypt_action) == 1, [On], [Off])
  ...Enable :dll %FiSH_dll INI_SetBool encrypt_action 1
  ...Disable :dll %FiSH_dll INI_SetBool encrypt_action 0
  ..Encrypt TOPIC $iif($dll(%FiSH_dll, INI_GetSectionBool,$network $chan encrypt_topic 0) == 1, [On], [Off])
  ...Enable :dll %FiSH_dll INI_SetSectionBool $network $chan encrypt_topic 1
  ...Disable :dll %FiSH_dll INI_SetSectionBool $network $chan encrypt_topic 0
  ..-
  ..Set plain-prefix $chr(91) $readini(%blow_ini,FiSH,plain_prefix) $chr(93) :FiSH.prefix $input(Enter new plain-prefix:,e,Plain-Prefix,$readini(%blow_ini,FiSH,plain_prefix))
  ..$iif($readini(%blow_ini,FiSH,mark_position) == 0, $style(2)) Set cryptmark $chr(91) $readini(%blow_ini,FiSH,mark_encrypted) $chr(93) :FiSH.cryptmark $input(Enter new cryptmark:,e,Crypt-Mark,$readini(%blow_ini,FiSH,mark_encrypted))
  ..Crypt-Mark $iif(!$readini(%blow_ini,FiSH,mark_position), [Disabled], $iif($readini(%blow_ini,FiSH,mark_position) == 1, [Suffix], [Prefix]))
  ...Prefix :writeini -n %blow_ini FiSH mark_position 2
  ...Suffix :writeini -n %blow_ini FiSH mark_position 1
  ...Disable :writeini -n %blow_ini FiSH mark_position 0
  ..$iif($readini(%blow_ini,FiSH,mark_position) == 0, $style(2)) Crypt-Mark for $chan $iif($dll(%FiSH_dll, INI_GetSectionBool,$network $chan mark_encrypted 0) == 0, [Off], [On])
  ...$iif($readini(%blow_ini,FiSH,mark_position) == 0, $style(2)) Enable :dll %FiSH_dll INI_SetSectionBool $network $chan mark_encrypted 1
  ...$iif($readini(%blow_ini,FiSH,mark_position) == 0, $style(2)) Disable :dll %FiSH_dll INI_SetSectionBool $network $chan mark_encrypted 0
  ..-
  ..NickTracker $iif($dll(%FiSH_dll,INI_GetBool,nick_track 0) == 0, [Off], [On])
  ...Enable :dll %FiSH_dll INI_SetBool nick_track 1
  ...Disable :dll %FiSH_dll INI_SetBool nick_track 0
  ..-
  ..Open blow.ini :run %blow_ini
  ..-
  ..Based on FiSH 10:run http://github.com/flakes/mirc_fish_10

}  

menu query {
  -
  FiSH
  .DH1080 keyXchange: FiSH.DH1080_INIT $1
  .Auto-KeyXchange $iif($dll(%FiSH_dll,INI_GetBool,auto_keyx 1) == 0, [Off], [On])
  ..Enable :dll %FiSH_dll INI_SetBool auto_keyx 1
  ..Disable :dll %FiSH_dll INI_SetBool auto_keyx 0
  .CBC key exchange $iif($dll(%FiSH_dll, INI_GetSectionBool,$network $1 dh1080_cbc 1) == 1, [On], [Off])
  ..Enable :dll %FiSH_dll INI_SetSectionBool $network $1 dh1080_cbc 1
  ..Disable :dll %FiSH_dll INI_SetSectionBool $network $1 dh1080_cbc 0
  .-
  .Show key :FiSH.showkey $1
  ..$iif($len($dll(%FiSH_dll,FiSH_GetKey10,$network $1)) < 1, $style(2)) CBC key $iif($dll(%FiSH_dll, INI_GetSectionBool,$network $1 cbc 0) == 1, [True], [False])
  ..Enable CBC key:dll %FiSH_dll INI_SetSectionBool $network $1 cbc 1
  ..Disable CBC key:dll %FiSH_dll INI_SetSectionBool $network $1 cbc 0
  .-
  .Set new key :FiSH.setkey $1 $?
  .Set new key (UTF-8) :FiSH.setkey_utf8 $1 $?
  .Remove key :FiSH.removekey $1
  .Copy key :clipboard $dll(%FiSH_dll,FiSH_GetKey10,$network $1)
  .Misc config
  ..-
  ..Encrypt outgoing $iif($dll(%FiSH_dll,INI_GetBool,process_outgoing 1) == 0, [Off], [On])
  ...Enable :dll %FiSH_dll INI_SetBool process_outgoing 1
  ...Disable :dll %FiSH_dll INI_SetBool process_outgoing 0
  ..Decrypt incoming $iif($dll(%FiSH_dll,INI_GetBool,process_incoming 1) == 0, [Off], [On])
  ...Enable :dll %FiSH_dll INI_SetBool process_incoming 1
  ...Disable :dll %FiSH_dll INI_SetBool process_incoming 0
  ..-
  ..Encrypt NOTICE $iif($dll(%FiSH_dll,INI_GetBool,encrypt_notice) == 1, [On], [Off])
  ...Enable :dll %FiSH_dll INI_SetBool encrypt_notice 1
  ...Disable :dll %FiSH_dll INI_SetBool encrypt_notice 0
  ..Encrypt ACTION $iif($dll(%FiSH_dll,INI_GetBool,encrypt_action) == 1, [On], [Off])
  ...Enable :dll %FiSH_dll INI_SetBool encrypt_action 1
  ...Disable :dll %FiSH_dll INI_SetBool encrypt_action 0
  ..-
  ..Set plain-prefix $chr(91) $readini(%blow_ini,FiSH,plain_prefix) $chr(93) :FiSH.prefix $input(Enter new plain-prefix:,e,Plain-Prefix,$readini(%blow_ini,FiSH,plain_prefix))
  ..$iif($readini(%blow_ini,FiSH,mark_position) == 0, $style(2)) Set cryptmark $chr(91) $readini(%blow_ini,FiSH,mark_encrypted) $chr(93) :FiSH.cryptmark $input(Enter new cryptmark:,e,Crypt-Mark,$readini(%blow_ini,FiSH,mark_encrypted))
  ..Crypt-Mark $iif($readini(%blow_ini,FiSH,mark_position) == 0, [Disabled], $iif($readini(%blow_ini,FiSH,mark_position) == 1, [Suffix], [Prefix]))
  ...Prefix :writeini -n %blow_ini FiSH mark_position 2
  ...Suffix :writeini -n %blow_ini FiSH mark_position 1
  ...Disable :writeini -n %blow_ini FiSH mark_position 0
  ..$iif($readini(%blow_ini,FiSH,mark_position) == 0, $style(2)) Crypt-Mark for $1 $iif($dll(%FiSH_dll, INI_GetSectionBool,$network $1 mark_encrypted 0) == 0, [Off], [On])
  ...$iif($readini(%blow_ini,FiSH,mark_position) == 0, $style(2)) Enable :dll %FiSH_dll INI_SetSectionBool $network $1 mark_encrypted 1
  ...$iif($readini(%blow_ini,FiSH,mark_position) == 0, $style(2)) Disable :dll %FiSH_dll INI_SetSectionBool $network $1 mark_encrypted 0
  ..-
  ..NickTracker $iif($dll(%FiSH_dll,INI_GetBool,nick_track 0) == 0, [Off], [On])
  ...Enable :dll %FiSH_dll INI_SetBool nick_track 1
  ...Disable :dll %FiSH_dll INI_SetBool nick_track 0
  ..Open blow.ini :run %blow_ini
  ..-
  ..Based on FiSH 10:run http://github.com/flakes/mirc_fish_10
}

menu nicklist {
  -
  FiSH
  .DH1080 keyXchange: FiSH.DH1080_INIT $1
  .Auto-KeyXchange $iif($dll(%FiSH_dll,INI_GetBool,auto_keyx 1) == 0, [Off], [On])
  ..Enable :dll %FiSH_dll INI_SetBool auto_keyx 1
  ..Disable :dll %FiSH_dll INI_SetBool auto_keyx 0
  .CBC key exchange $iif($dll(%FiSH_dll, INI_GetSectionBool,$network $1 dh1080_cbc 1) == 1, [On], [Off])
  ..Enable :dll %FiSH_dll INI_SetSectionBool $network $1 dh1080_cbc 1
  ..Disable :dll %FiSH_dll INI_SetSectionBool $network $1 dh1080_cbc 0
  .Use same key as $chan :FiSH.usechankey $1 $chan
  .-
  .Show key :FiSH.showkey $1
  ..$iif($len($dll(%FiSH_dll,FiSH_GetKey10,$network $1)) < 1, $style(2)) CBC key $iif($dll(%FiSH_dll, INI_GetSectionBool,$network $1 cbc 0) == 1, [True], [False])
  ..Enable CBC key:dll %FiSH_dll INI_SetSectionBool $network $1 cbc 1
  ..Disable CBC key:dll %FiSH_dll INI_SetSectionBool $network $1 cbc 0
  .-
  .Set new key :FiSH.setkey $1 $?
  .Set new key (UTF-8) :FiSH.setkey_utf8 $1 $?
  .Remove key :FiSH.removekey $1
  .Copy key :clipboard $dll(%FiSH_dll,FiSH_GetKey10,$network $1)
  .Misc config
  ..Encrypt outgoing $iif($dll(%FiSH_dll,INI_GetBool,process_outgoing 1) == 0, [Off], [On])
  ...Enable :dll %FiSH_dll INI_SetBool process_outgoing 1
  ...Disable :dll %FiSH_dll INI_SetBool process_outgoing 0
  ..Decrypt incoming $iif($dll(%FiSH_dll,INI_GetBool,process_incoming 1) == 0, [Off], [On])
  ...Enable :dll %FiSH_dll INI_SetBool process_incoming 1
  ...Disable :dll %FiSH_dll INI_SetBool process_incoming 0
  ..-
  ..Encrypt NOTICE $iif($dll(%FiSH_dll,INI_GetBool,encrypt_notice) == 1, [On], [Off])
  ...Enable :dll %FiSH_dll INI_SetBool encrypt_notice 1
  ...Disable :dll %FiSH_dll INI_SetBool encrypt_notice 0
  ..Encrypt ACTION $iif($dll(%FiSH_dll,INI_GetBool,encrypt_action) == 1, [On], [Off])
  ...Enable :dll %FiSH_dll INI_SetBool encrypt_action 1
  ...Disable :dll %FiSH_dll INI_SetBool encrypt_action 0
  ..-
  ..Set plain-prefix $chr(91) $readini(%blow_ini,FiSH,plain_prefix) $chr(93) :FiSH.prefix $input(Enter new plain-prefix:,e,Plain-Prefix,$readini(%blow_ini,FiSH,plain_prefix))
  ..$iif($readini(%blow_ini,FiSH,mark_position) == 0, $style(2)) Set cryptmark $chr(91) $readini(%blow_ini,FiSH,mark_encrypted) $chr(93) :FiSH.cryptmark $input(Enter new cryptmark:,e,Crypt-Mark,$readini(%blow_ini,FiSH,mark_encrypted))
  ..Crypt-Mark $iif($readini(%blow_ini,FiSH,mark_position) == 0, [Disabled], $iif($readini(%blow_ini,FiSH,mark_position) == 1, [Suffix], [Prefix]))
  ...Prefix :writeini -n %blow_ini FiSH mark_position 2
  ...Suffix :writeini -n %blow_ini FiSH mark_position 1
  ...Disable :writeini -n %blow_ini FiSH mark_position 0
  ..$iif($readini(%blow_ini,FiSH,mark_position) == 0, $style(2)) Crypt-Mark for $1 $iif($dll(%FiSH_dll, INI_GetSectionBool,$network $1 mark_encrypted 0) == 0, [Off], [On])
  ...$iif($readini(%blow_ini,FiSH,mark_position) == 0, $style(2)) Enable :dll %FiSH_dll INI_SetSectionBool $network $1 mark_encrypted 1
  ...$iif($readini(%blow_ini,FiSH,mark_position) == 0, $style(2)) Disable :dll %FiSH_dll INI_SetSectionBool $network $1 mark_encrypted 0
  ..-
  ..Open blow.ini :run %blow_ini
}
